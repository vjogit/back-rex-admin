// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package cohorte

import (
	"context"
)

const createCohorte = `-- name: CreateCohorte :exec
INSERT INTO public.cohorte (idExterne,nom) VALUES ($1, $2)
    on conflict (idExterne) do update set nom = EXCLUDED.nom
`

type CreateCohorteParams struct {
	Idexterne int32  `json:"idexterne"`
	Nom       string `json:"nom"`
}

func (q *Queries) CreateCohorte(ctx context.Context, arg CreateCohorteParams) error {
	_, err := q.db.Exec(ctx, createCohorte, arg.Idexterne, arg.Nom)
	return err
}

const deleteUserCohortes = `-- name: DeleteUserCohortes :exec
DELETE FROM user_cohorte WHERE user_id = $1
`

func (q *Queries) DeleteUserCohortes(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUserCohortes, userID)
	return err
}

const getCohorteIdFromIdExterne = `-- name: GetCohorteIdFromIdExterne :one
SELECT id FROM public.cohorte WHERE idExterne = $1
`

func (q *Queries) GetCohorteIdFromIdExterne(ctx context.Context, idexterne int32) (int32, error) {
	row := q.db.QueryRow(ctx, getCohorteIdFromIdExterne, idexterne)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertUserCohorte = `-- name: InsertUserCohorte :exec
INSERT INTO user_cohorte (user_id, cohorte_id) VALUES ($1, $2)
`

type InsertUserCohorteParams struct {
	UserID    int32 `json:"user_id"`
	CohorteID int32 `json:"cohorte_id"`
}

func (q *Queries) InsertUserCohorte(ctx context.Context, arg InsertUserCohorteParams) error {
	_, err := q.db.Exec(ctx, insertUserCohorte, arg.UserID, arg.CohorteID)
	return err
}
