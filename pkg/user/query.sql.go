// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package user

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addAdminRole = `-- name: AddAdminRole :exec
UPDATE "user"
SET roles = array_append(roles, 'admin')
WHERE id = $1 AND NOT ('admin' = ANY(roles))
`

func (q *Queries) AddAdminRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, addAdminRole, id)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO public.user (name, surname, email, roles)
VALUES ($1, $2, $3, $4)
RETURNING id, version, name, surname, email, roles
`

type CreateUserParams struct {
	Name    pgtype.Text `json:"name"`
	Surname pgtype.Text `json:"surname"`
	Email   string      `json:"email"`
	Roles   pgtype.Text `json:"roles"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Surname,
		arg.Email,
		arg.Roles,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.Roles,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM public.user WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, version, name, surname, email, roles FROM "user"
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.Roles,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, version, name, surname, email, roles FROM public.user WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.Roles,
	)
	return i, err
}

const getUserByMail = `-- name: GetUserByMail :one
SELECT id, version, name, surname, email, roles FROM public.user WHERE email = $1
`

func (q *Queries) GetUserByMail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByMail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.Roles,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT id, version, name, surname, email, roles FROM public.user ORDER BY id
`

func (q *Queries) ListUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.Name,
			&i.Surname,
			&i.Email,
			&i.Roles,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, version, name, surname, email, roles FROM "user"
ORDER BY id ASC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.Name,
			&i.Surname,
			&i.Email,
			&i.Roles,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAdminRole = `-- name: RemoveAdminRole :exec
UPDATE "user"
SET roles = array_remove(roles, 'admin')
WHERE id = $1
`

func (q *Queries) RemoveAdminRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, removeAdminRole, id)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE public.user
SET name = $1,
    surname = $2,
    email = $3,
    roles = $4,
    version = version + 1
WHERE id = $5 AND version = $6
RETURNING version
`

type UpdateUserParams struct {
	Name    pgtype.Text `json:"name"`
	Surname pgtype.Text `json:"surname"`
	Email   string      `json:"email"`
	Roles   pgtype.Text `json:"roles"`
	ID      int32       `json:"id"`
	Version pgtype.Int4 `json:"version"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Name,
		arg.Surname,
		arg.Email,
		arg.Roles,
		arg.ID,
		arg.Version,
	)
	var version pgtype.Int4
	err := row.Scan(&version)
	return version, err
}
