// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package user

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM public.user WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT id, version, name, surname, email, roles, blame FROM public.user WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.Roles,
		&i.Blame,
	)
	return i, err
}

const getUserByMail = `-- name: GetUserByMail :one
SELECT id, version, name, surname, email, roles, blame FROM public.user WHERE lower(email) = lower($1)
`

func (q *Queries) GetUserByMail(ctx context.Context, lower string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByMail, lower)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.Roles,
		&i.Blame,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT id, version, name, surname, email, roles, blame FROM public.user ORDER BY id
`

func (q *Queries) ListUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.Name,
			&i.Surname,
			&i.Email,
			&i.Roles,
			&i.Blame,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, version, name, surname, email, roles, blame FROM "user"
ORDER BY id ASC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.Name,
			&i.Surname,
			&i.Email,
			&i.Roles,
			&i.Blame,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePartialUser = `-- name: UpdatePartialUser :one
UPDATE public.user
SET version = version + 1,
    roles = $1,
    blame = $2
WHERE id = $3 AND version = $4
RETURNING id, version, name, surname, email, roles, blame
`

type UpdatePartialUserParams struct {
	Roles   pgtype.Text `json:"roles"`
	Blame   pgtype.Bool `json:"blame"`
	ID      int32       `json:"id"`
	Version pgtype.Int4 `json:"version"`
}

func (q *Queries) UpdatePartialUser(ctx context.Context, arg UpdatePartialUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updatePartialUser,
		arg.Roles,
		arg.Blame,
		arg.ID,
		arg.Version,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.Roles,
		&i.Blame,
	)
	return i, err
}
